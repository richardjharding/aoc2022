#!fsharp

let sampleInput = """vJrwpWtwJgWrhcsFMMfFFhFp
jqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL
PmmdzqPrVvPwwTWBwg
wMqvLMZHhHMvwLHjbvcjnnSBnvTQFn
ttgJtRGJQctTZtZT
CrZsJsPPZsGzwwsLwLmpwMDw""".Split("\r\n") |> Array.toList

let transformInputIntoListOfRucksacs (input: string list) =
    input |> List.map (fun s -> [(s.Substring(0,(s.Length /2))); (s.Substring(s.Length/2))])

let sacks = transformInputIntoListOfRucksacs sampleInput

let distinctItems (compartment: string) =
    let foo  = List.distinct (compartment |> Seq.toList)
    String(foo |> List.sort |>  List.toArray)


sacks.Head.Head |> distinctItems

let distinctSacks (sacks: (string list) list) = 
    sacks |> List.map (fun r -> [(distinctItems (r.[0]));(distinctItems (r.[1]))])
    

sacks |> distinctSacks

let inCommon (first: string) (second: string) = 
    let input = first |> Seq.toList
    let comp = second |> Seq.toList
    
    let isHit (c:char) (foo: char list) =
        foo |> List.contains c

    let foo (hits: char list) (c:char) =
        if (isHit c comp) then            
            c :: hits
        else
            hits

    List.fold foo [] input
    
let x = sacks.[0].[0] 
let y = sacks.[0].[1] 

sacks 
|> List.map (fun s -> inCommon s.[0] s.[1])
|> List.map (fun s -> List.distinct s)

let input = File.ReadAllText("input.txt").Split("\r\n") |> Array.toList

let partoneInput = transformInputIntoListOfRucksacs input

let commonLetters = partoneInput 
                    |> List.map (fun s -> inCommon s.[0] s.[1])
                    |> List.map (fun s -> List.distinct s)

// 65 -> 90 = A-Z
// 97 -> 122 = a - z
 
let score c = 
    let v = (int)c
    if (v > 64 && v <91 ) then
        int(v - 64 + 26)
    else
        int(v - (96))

let convertToScores (c: char list) = 
    c |> List.map (fun c -> score c)

let scores = commonLetters |> List.map (fun l -> convertToScores l)

scores |> List.concat |> List.sum

#!markdown

part 2

#!fsharp

let splitIntoGroups (input: string list) = 
    input |> List.chunkBySize 3

let groups = splitIntoGroups sampleInput

// let s = Map [('a', 0)]

// let b = s.Add('A', 0)

// s.ContainsKey('a')
//s.['A']

let s = groups[0].[0]

let updateMap  (m:Map<char,int>) (c:char) = 
    let f (v: int option) =
        match v with
        | Some x -> Some (x + 1)
        | None -> Some 1
    
    m.Change(c,f)

let updateMapFromString (s:string) = s |> Seq.toList |> List.distinct

let mapOne = s |> Seq.toList |> List.distinct |> List.fold (updateMap) Map.empty

let mapTwo = groups[0].[1] |> Seq.toList |> List.distinct |> List.fold (updateMap) mapOne

let mapThree = groups[0].[2] |> Seq.toList |> List.distinct |> List.fold (updateMap) mapTwo

mapThree |> Map.filter (fun k v -> v = 3)

let keys = groups 
            |> List.map (fun groupList -> 
                            let foo = groupList |> List.map (fun s -> updateMapFromString s) //def a better way to do this with fold!
                            let one = foo[0] |> List.fold (updateMap) Map.empty
                            let two = foo[1] |> List.fold updateMap one
                            foo[2] |> List.fold updateMap two |> Map.filter (fun k v -> v = 3) |> Map.keys
                )
                |> Seq.concat
                |> Seq.toList


let keyScores = convertToScores keys

#!fsharp

let groupsPart2 = splitIntoGroups input

let keys2 = groupsPart2
            |> List.map (fun groupList -> 
                            let foo = groupList |> List.map (fun s -> updateMapFromString s)
                            let one = foo[0] |> List.fold (updateMap) Map.empty
                            let two = foo[1] |> List.fold updateMap one
                            foo[2] |> List.fold updateMap two |> Map.filter (fun k v -> v = 3) |> Map.keys
                )
                |> Seq.concat
                |> Seq.toList

let keysPart2 = convertToScores keys2

keysPart2 |> List.sum
