#!fsharp

let sampleInput = [("A","Y"); ("B","X"); ("C","Z")]

let score (round:(string*string)) = // rock (a,x) 1 paper (b,y) 2 scis (c,z) 3
    match round with
    | ("A","X") -> 4 // draw rock (1) 1 + 3
    | ("A","Y") -> 8 // win paper (2) v rock 2 + 6
    | ("A","Z") -> 3 // lose rock v sc = 3 + 0
    | ("B","X") -> 1 // lose paper v rock 1 + 0
    | ("B","Y") -> 5 // draw paper v paper 2 + 3
    | ("B","Z") -> 9 // win paper v sc 3 + 6
    | ("C","X") -> 7 // win sc v rock 1 + 6
    | ("C","Y") -> 2 // lose sc v paper 2 + 0
    | ("C","Z") -> 6 // draw sc v sc = 3 + 3
    | _ -> raise (Exception "error")

let sampleScores input = 
    input |> List.map (fun round -> score round)

sampleScores sampleInput |> List.sum
    

#!fsharp

open System.IO
open System
// fetch input

let input = File.ReadAllText("input.txt").Split("\r\n")
            |> Array.toList 
            |> List.map (fun s -> 
                            let parts = s.Split(" ")
                            ((parts.[0]), (parts.[1]))
                            )

sampleScores input |> List.sum

#!markdown

Part 2

map input (move, desired result) to (move, move) - then score as before

#!fsharp

let outComeToMove opMove outcome =  // X = lose, Y = draw, Z = win
    match opMove, outcome with
    | "A","X" -> "Z"  // lose to rock play sc
    | "A","Y" -> "X"  // draw to rock, play rock
    | "A","Z" -> "Y"  // win against rock play paper
    | "B","X" -> "X"  // lose to paper play rock
    | "B","Y" -> "Y"  // draw to paper play paper
    | "B","Z" -> "Z"  // win againt paper play sc
    | "C","X" -> "Y"  // lose to sc play paper
    | "C","Y" -> "Z"  // draw to sc play sc 
    | "C","Z" -> "X"  // win against sc play rock
    | _ -> raise (Exception "error")

let mapInputByOutcome (input: string*string) =
    let move = outComeToMove (fst input) (snd input)
    ((fst input), move)

let newInput = sampleInput |> List.map (fun r -> mapInputByOutcome(r))

sampleScores newInput |> List.sum

#!fsharp

let par2Input = input |> List.map (fun r -> mapInputByOutcome(r))

sampleScores par2Input |> List.sum
